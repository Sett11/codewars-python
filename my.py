alpha={
  'A': '10111',
  'B': '111010101',
  'C': '11101011101',
  'D': '1110101',
  'E': '1',
  'F': '101011101',
  'G': '111011101',
  'H': '1010101',
  'I': '101',
  'J': '1011101110111',
  'K': '111010111',
  'L': '101110101',
  'M': '1110111',
  'N': '11101',
  'O': '11101110111',
  'P': '10111011101',
  'Q': '1110111010111',
  'R': '1011101',
  'S': '10101',
  'T': '111',
  'U': '1010111',
  'V': '101010111',
  'W': '101110111',
  'X': '11101010111',
  'Y': '1110101110111',
  'Z': '11101110101',
  '0': '1110111011101110111',
  '1': '10111011101110111',
  '2': '101011101110111',
  '3': '1010101110111',
  '4': '10101010111',
  '5': '101010101',
  '6': '11101010101',
  '7': '1110111010101',
  '8': '111011101110101',
  '9': '11101110111011101',
  '.': '10111010111010111',
  ',': '1110111010101110111',
  '?': '101011101110101',
  "'": '1011101110111011101',
  '!': '1110101110101110111',
  '/': '1110101011101',
  '(': '111010111011101',
  ')': '1110101110111010111',
  '&': '10111010101',
  ':': '11101110111010101',
  ';': '11101011101011101',
  '=': '1110101010111',
  '+': '1011101011101',
  '-': '111010101010111',
  '_': '10101110111010111',
  '"': '101110101011101',
  '$': '10101011101010111',
  '@': '10111011101011101',
  ' ': '0'
}
alpha2={'10111': 'A', '111010101': 'B', '11101011101': 'C', '1110101': 'D', '1': 'E', '101011101': 'F', '111011101': 'G', '1010101': 'H', '101': 'I', '1011101110111': 'J', '111010111': 'K', '101110101': 'L', '1110111': 'M', '11101': 'N', '11101110111': 'O', '10111011101': 'P', '1110111010111': 'Q', '1011101': 'R', '10101': 'S', '111': 'T', '1010111': 'U', '101010111': 'V', '101110111': 'W', '11101010111': 'X', '1110101110111': 'Y', '11101110101': 'Z', '1110111011101110111': '0', '10111011101110111': '1', '101011101110111': '2', '1010101110111': '3', '10101010111': '4', '101010101': '5', '11101010101': '6', '1110111010101': '7', '111011101110101': '8', '11101110111011101': '9', '10111010111010111': '.', '1110111010101110111': ',', '101011101110101': '?', '1011101110111011101': "'", '1110101110101110111': '!', '1110101011101': '/', '111010111011101': '(', '1110101110111010111': ')', '10111010101': '&', '11101110111010101': ':', '11101011101011101': ';', '1110101010111': '=', '1011101011101': '+', '111010101010111': '-', '10101110111010111': '_', '101110101011101': '"', '10101011101010111': '$', '10111011101011101': '@', '0': ' '}

def twos_comp(n,l):
    if (n&(1<<(l-1))):
        n-=(1<<l)
    return n

def num_to_bin(n,l):
    if n<0:
        n=2**l+n
    b=bin(n)[2:]
    s=l-len(b)
    return '0'*s+b

class Morse:
    @classmethod
    def encode(self,s):
        a=sum([[alpha[i],'0'*3] for i in s],[])[:-1]
        t,n=''.join(a),32
        while n<len(t):
            n+=32
        t+='0'*(n-len(t))
        return [twos_comp(int(t[i:i+32],2),32) for i in range(0,len(t),32)]
    
    @classmethod
    def decode(self,a):
        return ' '.join(''.join(alpha2[j] for j in i.split('0'*3)) for i in ''.join(num_to_bin(i,32) for i in a).rstrip('0').split('0'*7))

print(Morse.encode('MMM'))
print(Morse.encode('EEEEEEEIE'))
print(Morse.encode('HELLO WORLD'))

print(Morse.decode([-1440552402, -1547992901, -1896993141, -1461059584]))